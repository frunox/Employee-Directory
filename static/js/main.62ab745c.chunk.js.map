{"version":3,"sources":["components/Banner/index.js","components/SearchButton/index.js","components/EmployeeTable/index.js","components/EmployeeList/index.js","App.js","serviceWorker.js","index.js"],"names":["Banner","className","SearchButton","state","input","value","this","name","onChange","handleInputChange","type","placeholder","Component","EmployeeTable","props","src","image","alt","firstName","lastName","phone","email","dob","console","log","employees","results","id","EmployeeList","map","employee","picture","thumbnail","first","last","cell","date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"unxCAceA,MATf,WACE,OACE,yBAAKC,UAAU,sBACb,uDACA,uBAAGA,UAAU,WAAb,6F,4BCiBSC,G,kNArBbC,MAAQ,CACNC,MAAO,I,uDAIP,OACE,yBAAKH,UAAU,aACb,2BACEA,UAAU,QACVI,MAAOC,KAAKH,MAAMC,MAClBG,KAAK,QACLC,SAAUF,KAAKG,kBACfC,KAAK,OACLC,YAAY,gB,GAdKC,cC2BZC,MA5Bf,SAAuBC,GACnB,OACI,yBAAKb,UAAU,SACX,2BAAOA,UAAU,WAUb,+BACI,4BACI,4BAAI,yBAAKc,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,aACtC,4BAAKJ,EAAMI,UAAX,IAAuBJ,EAAMK,UAC7B,4BAAKL,EAAMM,OACX,4BAAKN,EAAMO,OACX,4BAAKP,EAAMQ,U,aCjBnCC,QAAQC,IAAIC,EAAUC,QAAQ,GAAGC,GAAGtB,O,IAmDrBuB,E,4MA5CbzB,MAAQ,CACNsB,a,uDAIA,OACE,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,WACb,+BACE,4BACE,qCACA,oCACA,qCACA,qCACA,qCAGHK,KAAKH,MAAMsB,UAAUC,QAAQG,KAAI,SAAAC,GAAQ,OAExC,kBAAE,EAAF,CACEd,MAAOc,EAASC,QAAQC,UACxBd,UAAWY,EAASvB,KAAK0B,MACzBd,SAAUW,EAASvB,KAAK2B,KACxBd,MAAOU,EAASK,KAChBd,MAAOS,EAAST,MAChBC,IAAKQ,EAASR,IAAIc,KAClBT,GAAIG,EAASH,GAAGtB,iB,GA3BHO,a,MCaZyB,MAhBf,WAEE,OADAd,QAAQC,IAAI,UAEV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.62ab745c.chunk.js","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// component to render the page heading\nfunction Banner() {\n  return (\n    <div className=\"banner text-center\">\n      <h3>Your Employee Directory</h3>\n      <p className=\"message\">Click on column headers to revise your search, or use search box to narrow your results</p>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, { Component } from \"react\";\n// import Container from './Container'\nimport \"./style.css\";\n\nclass SearchButton extends Component {\n  state = {\n    input: \"\"\n  }\n\n  render() {\n    return (\n      <div className=\"inputLine\">\n        <input\n          className=\"input\"\n          value={this.state.input}\n          name=\"input\"\n          onChange={this.handleInputChange}\n          type=\"text\"\n          placeholder=\"Search\"\n        />\n\n      </div >\n    );\n  };\n}\n\nexport default SearchButton;\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction EmployeeTable(props) {\r\n    return (\r\n        <div className=\"table\">\r\n            <table className=\"content\">\r\n                {/* <thead>\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Name</th>\r\n                        <th>Phone</th>\r\n                        <th>email</th>\r\n                        <th>DOB</th>\r\n                    </tr>\r\n                </thead> */}\r\n                <tbody>\r\n                    <tr>\r\n                        <td><img src={props.image} alt={props.firstName} /></td>\r\n                        <td>{props.firstName} {props.lastName}</td>\r\n                        <td>{props.phone}</td>\r\n                        <td>{props.email}</td>\r\n                        <td>{props.dob}</td>\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmployeeTable;","import React, { Component } from \"react\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport employees from \"./employees.json\";\nimport \"./style.css\";\n// console.log(employees)\nconsole.log(employees.results[0].id.value)\n// console.log(employees.results[0].name.last)\n// console.log(employees.results[0].dob.date)\n// console.log(employees.results[0].email)\n// console.log(employees.results[0].cell)\n// console.log(employees.results[0].picture.thumbnail)\nclass EmployeeList extends Component {\n  state = {\n    employees\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Phone</th>\n              <th>email</th>\n              <th>DOB</th>\n            </tr>\n          </thead>\n          {this.state.employees.results.map(employee =>\n            // console.log(employee.cell);\n            < EmployeeTable\n              image={employee.picture.thumbnail}\n              firstName={employee.name.first}\n              lastName={employee.name.last}\n              phone={employee.cell}\n              email={employee.email}\n              dob={employee.dob.date}\n              id={employee.id.value}\n            />\n          )}\n        </div>\n      </div>\n    )\n\n  }\n\n}\n\n// image = { employees.results[0].picture.thumbnail }\n// firstName = { employees.results[0].name.first }\n// lastName = { employees.results[0].name.last }\n// phone = { employees.results[0].cell }\n// email = { employees.results[0].email }\n// dob = { employees.results[0].dob.date }\n\nexport default EmployeeList;\n","import React from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import Home from \"./pages/Home\";\nimport Banner from \"./components/Banner\";\nimport SearchButton from \"./components/SearchButton\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport './App.css';\n\nfunction App() {\n  console.log('in App')\n  return (\n    <div>\n      <Banner />\n      <SearchButton />\n      <EmployeeList />\n    </div>\n    // <Router>\n    //   <div>\n    //     <Route exact path=\"/\" component={Home} />\n    //   </div>\n    // </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}